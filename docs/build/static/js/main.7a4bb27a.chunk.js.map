{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["INITIAL_STATE","layout","i","w","h","x","y","minH","App","state","hideElements","setState","map","entry","toggleElement","toggleSingleElement","evt","index","currentTarget","dataset","onLayoutChange","nextLayout","className","onClick","this","data-index","width","margin","draggableCancel","isDraggable","isResizable","compactType","cols","rowHeight","mapLayoutItems","key","isHidden","element","maxH","React","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAaMA,G,YAAwB,CAC5BC,OAAQ,CACN,CAAEC,EAAG,IAAKC,EAAG,EAAGC,EAAG,GAAIC,EAAG,EAAGC,EAAG,EAAGC,KAAM,IACzC,CAAEL,EAAG,IAAKC,EAAG,EAAGC,EAAG,GAAIC,EAAG,EAAGC,EAAG,GAAIC,KAAM,IAC1C,CAAEL,EAAG,IAAKC,EAAG,EAAGC,EAAG,GAAIC,EAAG,EAAGC,EAAG,IAAKC,KAAM,OAO1BC,E,2MAEZC,MAAgBT,E,EAyCfU,aAAe,WACrB,EAAKC,SAAL,eACK,EAAKF,MADV,CAEER,OAAQ,EAAKQ,MAAMR,OAAOW,KAAI,SAAAC,GAC5B,OAAQA,EAAMX,GACZ,IAAK,IACL,IAAK,IACH,OAAO,EAAKY,cAAcD,GAC5B,QACE,OAAOA,U,EAMTE,oBAAsB,SAACC,GAC7B,IAAMC,EAAQD,EAAIE,cAAcC,QAAQF,MAExC,EAAKN,SAAS,CACZV,OAAQ,EAAKQ,MAAMR,OAAOW,KAAI,SAAAC,GAC5B,OAAQA,EAAMX,GACZ,KAAKe,EACH,OAAO,EAAKH,cAAcD,GAC5B,QACE,OAAOA,S,EAyBTO,eAAiB,SAACC,GACxB,EAAKV,SAAL,eACK,EAAKF,MADV,CAEER,OAAQoB,M,wEA1FV,OACE,yBAAKC,UAAU,QACb,4BAAQC,QAASC,KAAKd,cAAtB,mBACA,4BAAQe,aAAW,IAAIF,QAASC,KAAKT,qBAArC,YACA,4BAAQU,aAAW,IAAIF,QAASC,KAAKT,qBAArC,YAEA,yBAAKO,UAAU,UACb,kBAAC,IAAD,CACEI,MAAO,IACPC,OAAQ,CAAC,EAAG,GACZC,gBAAgB,iBAChBC,aAAa,EACbC,aAAa,EACbC,YAAY,WACZ9B,OAAQuB,KAAKf,MAAMR,OACnB+B,KAAM,EACNC,UAAW,EACXb,eAAgBI,KAAKJ,gBAEpBI,KAAKU,sB,uCAOkC,IAAD,OAC/C,OAAOV,KAAKf,MAAMR,OAAOW,KAAI,SAAAC,GAAK,OAChC,yBAAKsB,IAAKtB,EAAMX,EAAGoB,UAAS,eAAU,EAAKc,SAASvB,GAAS,SAAW,KACrEA,EAAMX,Q,+BAKImC,GACf,YAAwB,IAAjBA,EAAQC,MA3CG,IA2CgBD,EAAQjC,I,oCAiCtBiC,GACpB,OAAQA,EAAQC,MACd,UAAK,EACH,OAAO,eACFD,EADL,CAEEjC,EAjFY,EAkFZkC,KAAMD,EAAQjC,EACdG,KAnFY,IAqFhB,QACE,OAAO,eACF8B,EADL,CAEEjC,EAAGiC,EAAQC,KACX/B,KAAM8B,EAAQC,KACdA,UAAM,S,GAvFiBC,IAAMC,eCZnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7a4bb27a.chunk.js","sourcesContent":["import React from 'react';\nimport Container, { Layout } from 'react-grid-layout';\n\n\nimport './App.css';\nimport 'react-grid-layout/css/styles.css';\n\n\ninterface IState {\n  layout: Array<Layout>;\n}\n\n\nconst INITIAL_STATE: IState = {\n  layout: [\n    { i: '0', w: 2, h: 50, x: 0, y: 0, minH: 50 },\n    { i: '1', w: 2, h: 50, x: 0, y: 50, minH: 50 },\n    { i: '2', w: 2, h: 50, x: 0, y: 100, minH: 50 },\n  ],\n};\n\nconst HIDDEN_HEIGHT = 0;\n\n\nexport default class App extends React.PureComponent<{}, IState> {\n\n  public state: IState = INITIAL_STATE;\n\n  public render(): React.ReactNode {\n    return (\n      <div className=\"base\">\n        <button onClick={this.hideElements}>Toggle elements</button>\n        <button data-index=\"1\" onClick={this.toggleSingleElement}>Toggle 1</button>\n        <button data-index=\"2\" onClick={this.toggleSingleElement}>Toggle 2</button>\n\n        <div className=\"layout\">\n          <Container\n            width={600}\n            margin={[0, 0]}\n            draggableCancel=\".non-draggable\"\n            isDraggable={true}\n            isResizable={true}\n            compactType=\"vertical\"\n            layout={this.state.layout}\n            cols={2}\n            rowHeight={1}\n            onLayoutChange={this.onLayoutChange}\n          >\n            {this.mapLayoutItems()}\n          </Container>\n        </div>\n      </div>\n    );\n  }\n\n  private mapLayoutItems(): Array<React.ReactNode> {\n    return this.state.layout.map(entry => (\n      <div key={entry.i} className={`item ${this.isHidden(entry) ? 'hidden' : ''}`}>\n        {entry.i}\n      </div>\n    ));\n  }\n\n  private isHidden(element: Layout): boolean {\n    return element.maxH !== void 0 && element.h === HIDDEN_HEIGHT;\n  }\n\n  private hideElements = (): void => {\n    this.setState({\n      ...this.state,\n      layout: this.state.layout.map(entry => {\n        switch (entry.i) {\n          case '1':\n          case '2':\n            return this.toggleElement(entry);\n          default:\n            return entry;\n        }\n      }),\n    });\n  }\n\n  private toggleSingleElement = (evt: React.MouseEvent<HTMLButtonElement>): void => {\n    const index = evt.currentTarget.dataset.index;\n\n    this.setState({\n      layout: this.state.layout.map(entry => {\n        switch (entry.i) {\n          case index:\n            return this.toggleElement(entry);\n          default:\n            return entry;\n        }\n      }),\n    });\n  }\n\n  private toggleElement(element: Layout): Layout {\n    switch (element.maxH) {\n      case void 0:\n        return {\n          ...element,\n          h: HIDDEN_HEIGHT,\n          maxH: element.h,\n          minH: HIDDEN_HEIGHT,\n        };\n      default:\n        return {\n          ...element,\n          h: element.maxH,\n          minH: element.maxH,\n          maxH: void 0,\n        }\n    }\n  }\n\n  private onLayoutChange = (nextLayout: Array<Layout>): void => {\n    this.setState({\n      ...this.state,\n      layout: nextLayout,\n    });\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}